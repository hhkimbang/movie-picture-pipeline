name: backend-ci

on:
  pull_request:
    branches: 
    - master
    paths: /starter/backend/**
  workflow_dispatch:

env:
  PYTHON_VER: 3.11

jobs:
  run-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./starter/backend
    steps:
    - name: checkout
      uses: actions/checkout@v3
    - name: prepare python
      uses: actions/setup-python@v4
      with: 
        python-version: ${{env.PYTHON_VER}}
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pipenv
        key: pipenv-${{ hashFiles('**/Pipfile.lock') }}
        restore-keys: |
          pipenv-
    - name: Install
      run: | 
        pip install pipenv
        pipenv install && pip install flake8
    - name: Run tests
      run: |
        pipenv run test

  run-lint:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./starter/backend
    steps:
    - name: checkout
      uses: actions/checkout@v3
    - name: prepare python
      uses: actions/setup-python@v4
      with: 
        python-version: ${{env.PYTHON_VER}}
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pipenv
        key: pipenv-${{ hashFiles('**/Pipfile.lock') }}
        restore-keys: |
          pipenv-
    - name: Install
      run: | 
        pip install pipenv flake8
        pipenv install
    - name: Run lint
      run: |
        pipenv run lint

  build-app:
    needs: [run-test, run-lint]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./starter/backend
    steps:
    - name: checkout
      uses: actions/checkout@v3
    - name: Install
      run: | 
        pip install pipenv && pip install flake8
        pipenv install
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      with:
        mask-password: "true"
    - name: Build, Tag, and Push docker image
      env:
        REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        REPOSITORY: backend
        IMAGE_TAG: latest
      run: |
        docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
        docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG